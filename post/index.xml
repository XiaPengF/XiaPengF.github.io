<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Thinking</title>
    <link>https://XiaPengF.github.io/post/</link>
    <description>Recent content in Posts on Thinking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>All rights reserved - 2020</copyright>
    <lastBuildDate>Thu, 07 May 2020 18:48:32 +0800</lastBuildDate>
    
	<atom:link href="https://XiaPengF.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[剑指Offer] 11. 二进制中1的个数</title>
      <link>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-11.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Thu, 07 May 2020 18:48:32 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-11.-%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%B8%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</guid>
      <description>1.题目描述 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。
题目链接：https://www.nowcoder.com/practice/8ee967e43c2c4ec193b040ea7fbb10b8?tpId=13&amp;amp;tqId=11164&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 略。
public class Solution { public int NumberOf1(int n) { int count=0; while(n != 0){ n &amp;amp;= n-1; //得到二进制去掉最右边1后剩下的二进制数 n &amp;gt;&amp;gt;&amp;gt;= 1; count++; } return count; } } 运行时间：13ms
占用内存：9108k
3.位运算符相关 3.1 常见位运算&amp;amp;和&amp;amp;&amp;amp; (1). &amp;amp;叫做位的与运算符
n &amp;amp;= n-1 -&amp;gt; 得到二进制去掉最右边1后剩下的二进制数（例如当n=00010101，经过n &amp;amp;= n-1后得到00010100）；
n &amp;amp;= (-n) -&amp;gt; 得到二进制只剩最右边1的二进制数（例如当n=00010101，经过 n &amp;amp;= (-n) 后得到00000001）。
(2). &amp;amp;&amp;amp;叫做逻辑与运算符，又叫短路运算符。当左边条件执行结果为false时，短路运算符的右边条件不会执行，效率相对&amp;amp;效率更快。
3.2 常见位运算^（异或：不同为1，相同为0） 3.3 常见位运算&amp;raquo;和&amp;raquo;&amp;gt; (1). &amp;raquo; （带符号右移）：正数右移高位补0，负数右移高位补1 。
(2). &amp;raquo;&amp;gt; （无符号右移）：无论正数还是负数，高位通通补0。
对于正数而言，&amp;raquo;和&amp;raquo;&amp;gt;没有区别。</description>
    </item>
    
    <item>
      <title>[剑指Offer] 10. 矩形覆盖</title>
      <link>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-10.-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</link>
      <pubDate>Thu, 07 May 2020 17:52:28 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-10.-%E7%9F%A9%E5%BD%A2%E8%A6%86%E7%9B%96/</guid>
      <description>1.题目描述 我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2n的大矩形，总共有多少种方法？比如n=3时，23的矩形块有3种覆盖方法。
题目链接： https://www.nowcoder.com/practice/72a5a919508a4251859fb2cfb987a0e6?tpId=13&amp;amp;tqId=11163&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 其实就是斐波那契数。
2.1.使用递归 public class Solution { public int RectCover(int target) { if(target &amp;lt; 3){ return target; } return RectCover(target-1)+RectCover(target-2); } } 运行时间：446ms
占用内存：9424k
2.2.使用动态规划 public class Solution { public int RectCover(int target) { if(target &amp;lt; 2){ return target; } int[] dp = new int[target+1]; dp[0]=0;dp[1]=1;dp[2]=2; for(int i=3;i&amp;lt;target+1;i++){ dp[i] = dp[i-1]+dp[i-2]; } return dp[target]; } } 运行时间：26ms
占用内存：9448k</description>
    </item>
    
    <item>
      <title>[剑指Offer] 9. 变态跳台阶</title>
      <link>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-9.-%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</link>
      <pubDate>Thu, 07 May 2020 17:52:21 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-9.-%E5%8F%98%E6%80%81%E8%B7%B3%E5%8F%B0%E9%98%B6/</guid>
      <description>1.题目描述 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
题目链接： https://www.nowcoder.com/practice/22243d016f6b47f2a6928b4313c85387?tpId=13&amp;amp;tqId=11162&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 数学推导：
要添加
2.1.使用递归 public class Solution { public int JumpFloor(int target) { if(target&amp;lt;3){ return target; } return JumpFloor(target-1)+JumpFloor(target-2); } } 运行时间：17ms
占用内存：9152k
2.2.使用动态规划 public class Solution { public int JumpFloorII(int target) { if(target&amp;lt;3){ return target; } int[] dp = new int[target+1]; dp[0]=0;dp[1]=1;dp[2]=2; for(int i=3;i&amp;lt;target+1;i++){ dp[i] = 2*dp[i-1]; } return dp[target]; } } 运行时间：26ms
占用内存：9184k</description>
    </item>
    
    <item>
      <title>[剑指Offer] 8. 跳台阶</title>
      <link>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-8.-%E8%B7%B3%E5%8F%B0%E9%98%B6/</link>
      <pubDate>Thu, 07 May 2020 17:52:15 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-8.-%E8%B7%B3%E5%8F%B0%E9%98%B6/</guid>
      <description>1.题目描述 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。
题目链接： https://www.nowcoder.com/practice/8c82a5b80378478f9484d87d1c5f12a4?tpId=13&amp;amp;tqId=11161&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 此题其实就是一个斐波那契数列。
当 $n=1、2$时：$f(n)=1、2$ ；
当 $n&amp;gt;=3$时： $f(n) = f(n-1)+f(n-2) $
2.1.使用递归 public class Solution { public int JumpFloor(int target) { if(target&amp;lt;3){ return target; } return JumpFloor(target-1)+JumpFloor(target-2); } } 运行时间：383ms
占用内存：9416k
2.2.使用动态规划(借助数组) public class Solution { public int JumpFloor(int target) { if(target&amp;lt;3){ return target; } int[] dp = new int[target+1]; dp[0]=0;dp[1]=1;dp[2]=2; for(int i=3;i&amp;lt;target+1;i++){ dp[i] = dp[i-1]+dp[i-2]; } return dp[target]; } } 运行时间：16ms
占用内存：9292k
2.3.使用动态规划(不借助数组) public class Solution { public int JumpFloor(int target) { if(target&amp;lt;3){ return target; } int prev = 1, curr = 2; for(int i=3;i&amp;lt;=target;i++){ int sum = prev + curr; prev = curr; curr = sum; } return curr; } } 运行时间：13ms</description>
    </item>
    
    <item>
      <title>[剑指Offer] 7. 斐波那契数列</title>
      <link>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-7.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</link>
      <pubDate>Thu, 07 May 2020 17:52:09 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/07/%E5%89%91%E6%8C%87offer-7.-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</guid>
      <description>1.题目描述 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0，第1项是1）。n&amp;lt;=39
题目链接： https://www.nowcoder.com/practice/c6c7742f5ba7442aada113136ddea0c3?tpId=13&amp;amp;tqId=11160&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 只需注意斐波那契数列的第零项即可。
当 $n=0、1$时：$f(n)=0、1$ ；
当 $n&amp;gt;=2$时： $f(n) = f(n-1)+f(n-2) $
2.1.使用递归 public class Solution { public int Fibonacci(int n) { if(n&amp;lt;2){ return n; } int[] dp = new int[40]; dp[0] = 0; dp[1] = 1; for(int i=2;i&amp;lt;dp.length;i++){ dp[i] = dp[i-1]+dp[i-2]; } return dp[n]; } } 运行时间：995ms
占用内存：9040k
2.2.使用动态规划(借助数组) public class Solution { public int Fibonacci(int n) { if(n&amp;lt;2){ return n; } int[] dp = new int[40]; dp[0] = 0; dp[1] = 1; for(int i=2;i&amp;lt;dp.</description>
    </item>
    
    <item>
      <title>[剑指Offer] 6. 旋转数组的最小数字</title>
      <link>https://XiaPengF.github.io/2020/05/06/%E5%89%91%E6%8C%87offer-6.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</link>
      <pubDate>Wed, 06 May 2020 09:34:09 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/06/%E5%89%91%E6%8C%87offer-6.-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%B0%8F%E6%95%B0%E5%AD%97/</guid>
      <description>1.题目描述 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
题目链接： https://www.nowcoder.com/practice/9f3231a991af4f55b95579b44b7a01ba?tpId=13&amp;amp;tqId=11159&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
2.解题思路 本题的一个简单算法就是从左到右遍历，由于是递增的，直到找到一个小的数就可以停止了，但是这种方法速度相对太慢，所以可以采用二分法的思想，定义一个left和right逐步缩小范围，最终确定最小的数。
注意：像[1,0,1,1,1] 、[1,1,1,0,1]特殊数组要注意。
import java.util.ArrayList; public class Solution { public int minNumberInRotateArray(int [] array) { if(array==null || array.length==0){ return 0; } int left =0; int right=array.length-1; while(left&amp;lt;right){ int middle = (left+right)/2; if(array[middle] == array[right]){ right--; }else if(array[middle] &amp;gt; array[right]){ left = middle+1; }else{ right = middle; } } return array[left]; } } 运行时间：380ms
占用内存：28564k</description>
    </item>
    
    <item>
      <title>[剑指Offer] 4. 重建二叉树</title>
      <link>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-4.-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</link>
      <pubDate>Tue, 05 May 2020 13:05:45 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-4.-%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</guid>
      <description>1.题目描述 输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
题目链接： https://www.nowcoder.com/practice/8a19cbe657394eeaac2f6ea9b0f6fcf6?tpId=13&amp;amp;tqId=11157&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking%3E
2.解题思路 略
3.注意事项 略</description>
    </item>
    
    <item>
      <title>[剑指Offer] 5. 用两个栈实现队列</title>
      <link>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-5.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</link>
      <pubDate>Tue, 05 May 2020 13:05:07 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-5.-%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</guid>
      <description>1.题目描述 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
题目链接： https://www.nowcoder.com/practice/54275ddae22f475981afa2244dd448c6?tpId=13&amp;amp;tqId=11158&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
2.解题思路 略。
import java.util.Stack;
public class Solution { Stackstack1 = new Stack();
​ Stackstack2 = new Stack();
public void push(int node) { stack1.push(node); } public int pop() { while(!stack1.isEmpty()){ stack2.push(stack1.pop()); } int tem = stack2.pop(); while(!stack2.isEmpty()){ stack1.push(stack2.pop()); } return tem; }  }
运行时间：14ms
占用内存：9560k
3.注意事项 栈的特点：先进后出，队列的特点：先进先出。
思考：如何用两个队列来实现一个栈？</description>
    </item>
    
    <item>
      <title>[剑指Offer] 3. 从尾到头打印链表</title>
      <link>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-3.-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 05 May 2020 09:59:57 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/05/%E5%89%91%E6%8C%87offer-3.-%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/</guid>
      <description>1.题目描述 输入一个链表，按链表从尾到头的顺序返回一个ArrayList。
题目链接： https://www.nowcoder.com/practice/d0267f7f55b3412ba93bd35cfa8e8035?tpId=13&amp;amp;tqId=11156&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking
2.解题思路 借助额外空间Stack的先进后出的特点来得到链表的倒序节点。
import java.util.ArrayList; import java.util.Stack; public class Solution {
​ public ArrayListprintListFromTailToHead(ListNode listNode) {
 ArrayList&amp;lt;Integer&amp;gt; list = new ArrayList(); Stack&amp;lt;ListNode&amp;gt; stack = new Stack(); if(listNode==null || listNode.next==null){ return list; } while(listNode != null){ stack.push(listNode); listNode = listNode.next; } while(!stack.isEmpty()){ list.add(stack.pop().val); } return list; }  }
运行时间：17ms
占用内存：9364k
3.注意事项 Stack的进栈、出栈的常见方法： stack.push(E e)、stack.pop()别记混。</description>
    </item>
    
    <item>
      <title>[剑指Offer] 2. 替换空格</title>
      <link>https://XiaPengF.github.io/2020/05/01/%E5%89%91%E6%8C%87offer-2.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</link>
      <pubDate>Fri, 01 May 2020 16:36:27 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/01/%E5%89%91%E6%8C%87offer-2.-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</guid>
      <description>1.题目描述  题目链接： &amp;laquo;https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&amp;amp;tqId=11155&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&amp;gt; &amp;gt;
 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
2.解题思路 略
public class Solution { public String replaceSpace(StringBuffer str) { for (int i = 0; i &amp;lt; str.length(); i++) { if(str.charAt(i) == &#39; &#39;){ str.replace(i,i+1,&amp;quot;%20&amp;quot;); } } return new String(str); } } 运行时间：18ms
占用内存：9632k
3.String、StringBuffer、StringBuilder相关 3.1 String的介绍 　（1）String类是final类，也即意味着String类不能被继承，并且它的成员方法都默认为final方法。在Java中，被final修饰的类是不允许被继承的，并且该类中的成员方法都默认为final方法。在早期的JVM实现版本中，被final修饰的方法会被转为内嵌调用以提升执行效率。而从Java SE5/6开始，就渐渐摈弃这种方式了。因此在现在的Java SE版本中，不需要考虑用final去提升方法调用效率。只有在确定不想让该方法被覆盖时，才将方法设置为final。
（2）String类其实是通过char数组来保存字符串的。（3）String的sub()、concat()还是replace()都不是在原有的字符串上进行的，而是重新生成了一个新的字符串对象。也就是说进行这些操作后，最原始的字符串并没有被改变。
（4）在这里要永远记住一点：“对String对象的任何改变都不影响到原对象，相关的任何change操作都会生成新的对象”。
3.2 String的深入 ​	引出的问题：String str=&amp;quot;hello world&amp;quot;和String str=new String(&amp;ldquo;hello world&amp;rdquo;)的区别 ？
​	（1）如下代码：
 public class Demo01 { public static void main(String[] args) { String str1 = &amp;quot;hello world&amp;quot;; String str2 = new String(&amp;quot;hello world&amp;quot;); String str3 = &amp;quot;hello world&amp;quot;; String str4 = new String(&amp;quot;hello world&amp;quot;); System.</description>
    </item>
    
    <item>
      <title>[剑指Offer] 1. 二维数组中的查找</title>
      <link>https://XiaPengF.github.io/2020/05/01/%E5%89%91%E6%8C%87offer-1.-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</link>
      <pubDate>Fri, 01 May 2020 11:40:54 +0800</pubDate>
      
      <guid>https://XiaPengF.github.io/2020/05/01/%E5%89%91%E6%8C%87offer-1.-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</guid>
      <description>1.题目描述  题目链接： https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;amp;tqId=11154&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking
 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
2.解题思路 题目中说了是二维数组和整数，所以不需要考虑非法输入（包含字符串等）；但需要判断二维数组是否为空。 从每行最后一个数判断起，相等直接返回True，小于就循环到下一行，大于就在该行查找，全部找完没找到就返回False。
public class Solution { public boolean Find(int target, int array) { int hang = array.length; int lie = array[0].length; int i = 0; int j = lie-1; while(i&amp;lt;=hang-1 &amp;amp;&amp;amp; j&amp;gt;=0){ if(arrayi &amp;gt; target){ j--; }else if(arrayi &amp;lt; target){ i++; }else{ return true; } } return false; } }` 运行时间：190ms
占用内存：18428k</description>
    </item>
    
  </channel>
</rss>